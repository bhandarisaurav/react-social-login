{"version":3,"sources":["components/FacebookAndGoogle/FacebookAndGoogle.js","App.js","serviceWorker.js","index.js"],"names":["FacebookAndGoogle","props","responseFacebook","response","name","email","pic","picture","data","url","setState","fullName","profilePicture","facebookLoginSuccessful","console","log","state","responseGoogle","profileObj","imageUrl","componentClicked","getForm","method","className","htmlFor","type","id","appId","autoLoad","fields","callback","onClick","cssClass","clientId","buttonText","onSuccess","onFailure","cookiePolicy","getUserDetails","src","alt","googleLoginSuccessful","Fragment","this","Component","App","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8RAkHeA,E,kDA7Gb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAURC,iBAAmB,SAACC,GAClB,IAAIC,EAAOD,EAASC,KAChBC,EAAQF,EAASE,MACjBC,EAAMH,EAASI,QAAQC,KAAKC,IAChC,EAAKC,SAAS,CACZC,SAAUP,EACVC,MAAOA,EACPO,eAAgBN,EAChBO,yBAAyB,IAE3BC,QAAQC,IAAI,EAAKC,QArBA,EAwBnBC,eAAiB,SAACd,GAChB,IAAIC,EAAOD,EAASe,WAAWd,KAC3BC,EAAQF,EAASe,WAAWb,MAC5BC,EAAMH,EAASe,WAAWC,SAC9B,EAAKT,SAAS,CACZC,SAAUP,EACVC,MAAOA,EACPO,eAAgBN,EAChBO,yBAAyB,IAE3BC,QAAQC,IAAI,EAAKC,QAlCA,EAqCnBI,iBAAmB,WACjBN,QAAQC,IAAI,aAtCK,EAyCnBM,QAAU,WAER,OADAP,QAAQC,IAAI,WAEV,0BAAMO,OAAO,OAAOC,UAAU,QAC5B,uCAEA,kCACE,2BAAOC,QAAQ,QAAf,UACA,2BAAOC,KAAK,QAAQC,GAAG,OAAOtB,KAAK,eAEnC,2BAAOoB,QAAQ,YAAf,aACA,2BAAOC,KAAK,WAAWC,GAAG,WAAWtB,KAAK,mBAG5C,4BAAQqB,KAAK,UAAb,WACA,kBAAC,IAAD,CACEE,MAAM,kBACNC,UAAU,EACVC,OAAO,qBACPC,SAAU,EAAK5B,iBACf6B,QAAS,EAAKX,iBACdY,SAAS,WAEX,kBAAC,IAAD,CACEC,SAAS,2EACTC,WAAW,uBACXC,UAAW,EAAKlB,eAChBmB,UAAW,EAAKnB,eAChBoB,aAAc,qBACdd,UAAU,iBAtEC,EA4EnBe,eAAiB,WAEf,OADAxB,QAAQC,IAAI,eAEV,yBAAKQ,UAAU,aACb,yBACEA,UAAU,eACVgB,IAAK,EAAKvB,MAAMJ,eAChB4B,IAAK,EAAKxB,MAAML,WAElB,yBAAKY,UAAU,aACb,wBAAIA,UAAU,cAAc,EAAKP,MAAML,UACvC,uBAAGY,UAAU,aACX,0CAAgB,EAAKP,MAAMX,WAtFnC,EAAKW,MAAQ,CACXH,yBAAyB,EACzB4B,uBAAuB,EACvB9B,SAAU,GACVN,MAAO,GACPO,eAAgB,IAPD,E,qDAgGjB,OACE,kBAAC,IAAM8B,SAAP,KACG5B,QAAQC,IACP4B,KAAK3B,MAAMH,yBAA2B8B,KAAK3B,MAAMyB,uBAElDE,KAAK3B,MAAMH,yBAA2B8B,KAAK3B,MAAMyB,sBAC9CE,KAAKL,iBACLK,KAAKtB,e,GAxGeuB,aCoBjBC,MAnBf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,MACA,gCACE,wBAAIA,UAAU,+BAAd,2BAEE,uBACEA,UAAU,uBACVuB,KAAK,iCAFP,uBCAUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,a","file":"static/js/main.c3219d78.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport FacebookLogin from \"react-facebook-login\";\nimport GoogleLogin from \"react-google-login\";\n\nclass FacebookAndGoogle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      facebookLoginSuccessful: false,\n      googleLoginSuccessful: false,\n      fullName: \"\",\n      email: \"\",\n      profilePicture: \"\",\n    };\n  }\n\n  responseFacebook = (response) => {\n    let name = response.name;\n    let email = response.email;\n    let pic = response.picture.data.url;\n    this.setState({\n      fullName: name,\n      email: email,\n      profilePicture: pic,\n      facebookLoginSuccessful: true,\n    });\n    console.log(this.state);\n  };\n\n  responseGoogle = (response) => {\n    let name = response.profileObj.name;\n    let email = response.profileObj.email;\n    let pic = response.profileObj.imageUrl;\n    this.setState({\n      fullName: name,\n      email: email,\n      profilePicture: pic,\n      facebookLoginSuccessful: true,\n    });\n    console.log(this.state);\n  };\n\n  componentClicked = () => {\n    console.log(\"Clicked!\");\n  };\n\n  getForm = () => {\n    console.log(\"getForm\");\n    return (\n      <form method=\"post\" className=\"mt-5\">\n        <h1>Sign Up</h1>\n\n        <fieldset>\n          <label htmlFor=\"mail\">Email:</label>\n          <input type=\"email\" id=\"mail\" name=\"user_email\" />\n\n          <label htmlFor=\"password\">Password:</label>\n          <input type=\"password\" id=\"password\" name=\"user_password\" />\n        </fieldset>\n\n        <button type=\"submit\">Sign Up</button>\n        <FacebookLogin\n          appId=\"255214162170721\"\n          autoLoad={false}\n          fields=\"name,email,picture\"\n          callback={this.responseFacebook}\n          onClick={this.componentClicked}\n          cssClass=\"fb btn\"\n        />\n        <GoogleLogin\n          clientId=\"439028130958-5krmm73hu38p16shofu19265lsp3310t.apps.googleusercontent.com\"\n          buttonText=\"Login With Google   \"\n          onSuccess={this.responseGoogle}\n          onFailure={this.responseGoogle}\n          cookiePolicy={\"single_host_origin\"}\n          className=\"google btn\"\n        />\n      </form>\n    );\n  };\n\n  getUserDetails = () => {\n    console.log(\"UserDetails\");\n    return (\n      <div className=\"card w-25\">\n        <img\n          className=\"card-img-top\"\n          src={this.state.profilePicture}\n          alt={this.state.fullName}\n        />\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{this.state.fullName}</h5>\n          <p className=\"card-text\">\n            <strong>Email :{this.state.email}</strong>\n          </p>\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        {console.log(\n          this.state.facebookLoginSuccessful || this.state.googleLoginSuccessful\n        )}\n        {this.state.facebookLoginSuccessful || this.state.googleLoginSuccessful\n          ? this.getUserDetails()\n          : this.getForm()}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default FacebookAndGoogle;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport FacebookAndGoogle from \"./components/FacebookAndGoogle/FacebookAndGoogle\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FacebookAndGoogle />\n      <footer>\n        <h5 className=\"text-white font-weight-bold\">\n          All Rights Reserved &nbsp;\n          <a\n            className=\"text-decoration-none\"\n            href=\"https://sauravbhandari.com.np\"\n          >\n            @sauravbhandari\n          </a>\n        </h5>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}